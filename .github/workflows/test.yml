# Название workflow для запуска тестов
name: Run Tests with Mock Server

# Триггеры для запуска workflow
on:
  workflow_dispatch: # Для ручного запуска
  push:
    branches: [ master ]  # Запуск при пуше в ветку master
  pull_request:
    branches: [ master ]  # Запуск при создании PR в ветку master

# Определение job'ы тестирования
jobs:
  test:
    # Запуск на последней версии Ubuntu
    runs-on: ubuntu-latest

    # Определение сервисов, необходимых для job'ы
    services:
      # Сервис мок-сервера
      mock-server:
        # Использование образа из GitHub Container Registry
        image: ghcr.io/stasnislav121/example-mock-server:main
        # Проброс порта 8000 из контейнера на хост
        ports:
          - 8000:8000
        # Настройка healthcheck для контейнера
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-start-period=10s
          --health-retries=10

    # Шаги выполнения job'ы
    steps:
    # Шаг 1: Получение кода автотестов
    - uses: actions/checkout@v4

    # Шаг 2: Установка Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'  # Указание версии Python

    # Шаг 3: Установка зависимостей для тестов
    - name: Install dependencies
      run: |
        # Обновление pip до последней версии
        python -m pip install --upgrade pip
        # Установка зависимостей из requirements.txt
        pip install -r requirements.txt
        pip install -r requirements-api.txt

    # Шаг 4: Ожидание готовности мок-сервера
    - name: Wait for mock server
      run: |
        # Попытка подключения к мок-серверу в течение 10 попыток
        for i in {1..10}; do
          # Проверка доступности эндпоинта здоровья
          if curl -s http://localhost:8000/health > /dev/null; then
            echo "Mock server is ready!"
            break
          fi
          echo "Waiting for mock server... ($i/10)"
          sleep 5  # Ожидание 5 секунд между попытками
        done

    # Шаг 5: Запуск тестов
    - name: Run tests
      env:
        # Установка переменной окружения с базовым URL API
        API_BASE_URL: "http://localhost:8000"
      run: |
        # Запуск pytest с генерацией отчетов Allure
        pytest -m "forci" --alluredir=./allure-results -v
    
    # Ручная установка Allure CLI
    - name: Install Allure CLI manually
      run: |
        # Создаем директорию для установки Allure
        mkdir -p $HOME/allure
        cd $HOME/allure
        
        # Скачиваем и распаковываем Allure
        curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -zxvf allure-2.24.0.tgz
        
        # Добавляем Allure в PATH для текущего шага
        echo "$HOME/allure/allure-2.24.0/bin" >> $GITHUB_PATH
        
        # Проверяем установку
        echo "Allure version:"
        $HOME/allure/allure-2.24.0/bin/allure --version
    
    # Генерируем отчет с использованием полного пути к allure
    - name: Generate Allure report
      if: always()
      run: |
        $HOME/allure/allure-2.24.0/bin/allure generate ./allure-results -o ./allure-report --clean
    
    # Публикуем отчет на GitHub Pages
    - name: Deploy to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./allure-report
        keep_files: false
    
    - name: Upload Allure results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: allure-results
        
    - name: Cleanup
      run: |
        docker stop mock-server || true
        docker rm mock-server || true
