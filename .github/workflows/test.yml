# –ù–∞–∑–≤–∞–Ω–∏–µ workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
name: Run Tests with Mock Server

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow
on:
  workflow_dispatch: # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  push:
    branches: [ master ]  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—É—à–µ –≤ –≤–µ—Ç–∫—É master
  pull_request:
    branches: [ master ]  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PR –≤ –≤–µ—Ç–∫—É master

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ job'—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
jobs:
  test:
    # –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Ubuntu
    runs-on: ubuntu-latest

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è job'—ã
    services:
      # –°–µ—Ä–≤–∏—Å –º–æ–∫-—Å–µ—Ä–≤–µ—Ä–∞
      mock-server:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∏–∑ GitHub Container Registry
        image: ghcr.io/stasnislav121/example-mock-server:main
        # –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ 8000 –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ —Ö–æ—Å—Ç
        ports:
          - 8000:8000
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ healthcheck –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-start-period=10s
          --health-retries=10

    # –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è job'—ã
    steps:
    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
    - uses: actions/checkout@v4

    # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'  # –£–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Python

    # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    - name: Install dependencies
      run: |
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
        python -m pip install --upgrade pip
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt
        pip install -r requirements.txt
        pip install -r requirements-api.txt

    # –®–∞–≥ 4: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–∫-—Å–µ—Ä–≤–µ—Ä–∞
    - name: Wait for mock server
      run: |
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–∫-—Å–µ—Ä–≤–µ—Ä—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –ø–æ–ø—ã—Ç–æ–∫
        for i in {1..10}; do
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è
          if curl -s http://localhost:8000/health > /dev/null; then
            echo "Mock server is ready!"
            break
          fi
          echo "Waiting for mock server... ($i/10)"
          sleep 5  # –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        done

    # –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    - name: Run tests
      id: run-tests
      env:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º URL API
        API_BASE_URL: "http://localhost:8000"
      run: |
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≤–æ–¥
        pytest -m "forci" --alluredir=./allure-results -v > test-output.txt 2>&1
        exit_code=$?
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        echo "=== TEST OUTPUT ==="
        cat test-output.txt
        echo "==================="
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥–∞
        TEST_RESULTS=$(tail -20 test-output.txt | grep -E "(passed|failed|skipped|deselected)" | tail -1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ —Å –ø–æ–º–æ—â—å—é awk
        PASSED_TESTS=$(echo "$TEST_RESULTS" | awk '{for(i=1;i<=NF;i++)if($i~/passed/ && $(i-1)~/^[0-9]+$/)print $(i-1)}' | head -1)
        FAILED_TESTS=$(echo "$TEST_RESULTS" | awk '{for(i=1;i<=NF;i++)if($i~/failed/ && $(i-1)~/^[0-9]+$/)print $(i-1)}' | head -1)
        SKIPPED_TESTS=$(echo "$TEST_RESULTS" | awk '{for(i=1;i<=NF;i++)if($i~/skipped/ && $(i-1)~/^[0-9]+$/)print $(i-1)}' | head -1)
        DESELECTED_TESTS=$(echo "$TEST_RESULTS" | awk '{for(i=1;i<=NF;i++)if($i~/deselected/ && $(i-1)~/^[0-9]+$/)print $(i-1)}' | head -1)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        PASSED_TESTS=${PASSED_TESTS:-0}
        FAILED_TESTS=${FAILED_TESTS:-0}
        SKIPPED_TESTS=${SKIPPED_TESTS:-0}
        DESELECTED_TESTS=${DESELECTED_TESTS:-0}
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
        TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS + SKIPPED_TESTS))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ output
        echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
        echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
        echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
        echo "skipped_tests=$SKIPPED_TESTS" >> $GITHUB_OUTPUT
        echo "deselected_tests=$DESELECTED_TESTS" >> $GITHUB_OUTPUT
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞, —á—Ç–æ–±—ã workflow –ø—Ä–æ–¥–æ–ª–∂–∏–ª—Å—è
        exit 0

    - name: Install Allure CLI manually
      run: |
        mkdir -p $HOME/allure
        cd $HOME/allure
        curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -zxvf allure-2.24.0.tgz
        echo "$HOME/allure/allure-2.24.0/bin" >> $GITHUB_PATH
        $HOME/allure/allure-2.24.0/bin/allure --version

    - name: Generate Allure report
      if: always()
      run: |
        $HOME/allure/allure-2.24.0/bin/allure generate ./allure-results -o ./allure-report --clean

    - name: Check generated report
      run: |
        echo "Contents of allure-report directory:"
        ls -la ./allure-report/
        echo "Index.html exists:"
        test -f ./allure-report/index.html && echo "YES" || echo "NO"

    - name: Deploy to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./allure-report
        keep_files: false

    - name: Upload Allure results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: allure-results

    - name: Send Telegram notification
      if: always()
      run: |
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–æ–≤
        if [ "${{ steps.run-tests.outputs.exit_code }}" = "0" ]; then
          EMOJI="‚úÖ"
          STATUS_TEXT="–£—Å–ø–µ—à–Ω–æ"
        else
          EMOJI="‚ùå"
          STATUS_TEXT="–° –æ—à–∏–±–∫–∞–º–∏"
        fi
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        MESSAGE="$EMOJI *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è* $EMOJI%0A%0A"
        MESSAGE+="*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* \`${{ github.repository }}\`%0A"
        MESSAGE+="*–°—Ç–∞—Ç—É—Å:* $STATUS_TEXT%0A"
        MESSAGE+="*–í–µ—Ç–∫–∞:* ${{ github.ref_name }}%0A"
        MESSAGE+="*–ö–æ–º–º–∏—Ç:* [${GITHUB_SHA:0:7}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})%0A%0A"
        MESSAGE+="*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:*%0A"
        MESSAGE+="‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${{ steps.run-tests.outputs.total_tests }}%0A"
        MESSAGE+="‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${{ steps.run-tests.outputs.passed_tests }}%0A"
        MESSAGE+="‚Ä¢ ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: ${{ steps.run-tests.outputs.failed_tests }}%0A"
        MESSAGE+="‚Ä¢ ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: ${{ steps.run-tests.outputs.skipped_tests }}%0A"
        MESSAGE+="‚Ä¢ üî∂ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö: ${{ steps.run-tests.outputs.deselected_tests }}%0A%0A"
        MESSAGE+="*üìù –û—Ç—á–µ—Ç Allure:* [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç](https://stasnislav121.github.io/Example_tests/)%0A"
        MESSAGE+="*üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—É—Å–∫–∞:* [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d parse_mode="Markdown" \
          -d text="$MESSAGE"

    - name: Cleanup
      run: |
        docker stop mock-server || true
        docker rm mock-server || true
